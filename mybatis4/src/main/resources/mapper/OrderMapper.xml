<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:命名空间，用于隔离sql。
    其中一个很重要的作用是，mapper动态代理开发时候使用需要指定Mapper的类路径
-->
<mapper  namespace="com.li.mybatis4.mapper.OrderMapper">
    <!--
    resultType可以指定将查询结果映射为pojo，但是需要pojo的属性名和数据库表列名一致才可映射成功
    如果sql查询的字段名和pojo的属性名不一致，可以通过resultMap将字段名和pojo属性名做一个对应关系
    resultMap实质上还需要将查询结果映射到pojo对象中
    resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list
    实现一对一查询和一对多查询
-->
    <!--查询所有订单数据-->
    <select id="queryOrderAll" resultType="order">
        select * from orders
    </select>

        <!--
         由于OrderMapper.xml中的sql查询列(user_id)和Order属性中的userId名称不一致，所以查询的结果不能映射到pojo中
         需要定义resultMap，把orderResultMap将sql查询列（user_id）和Order属性（userId）对应起来
         resultMap最终还是要将结果映射到pojo上，type就是指定映射到哪一个pojo上
         id : 设置resultMap的id
        定义主键，非常重要，如果是多个字段，则定义多个id
        property : 主键在pojo属性中的属性名
        column : 主键在数据库中的列名
        -->
    <resultMap id="orderResultMap" type="order">
        <id property="id" column="id"/>
        <!--定义普通属性-->
        <result property="userId" column="user_id"/>
        <result property="number" column="number"/>
        <result property="createtime" column="createtime"/>
        <result property="note" column="note"/>
    </resultMap>
    <select id="queryOrdersAll" resultMap="orderResultMap">
        select * from orders
    </select>

</mapper>